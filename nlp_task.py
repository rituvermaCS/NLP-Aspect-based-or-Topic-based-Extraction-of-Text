# -*- coding: utf-8 -*-
"""NLP-Task.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1H6zTPyQMtyn79dKe76VCcsWEyvnd19sE
"""

import spacy

#python -m spacy download en_core_web_sm
sp = spacy.load("en_core_web_sm")

from google.colab import files
uploaded = files.upload()

import io
import pandas as pd
sentences = pd.read_csv(io.BytesIO(uploaded['review_dataset.csv']))

#sentences = [
#  'The food we had yesterday was delicious',
#  'My time in Italy was very enjoyable',
#  'I found the meal to be tasty',
#  'The internet was slow.',
#  'Our experience was suboptimal'
#]

for sentence in sentences:
  doc = sp(sentence)
  for token in doc:
    print(token.text, token.dep_, token.head.text, token.head.pos_,
      token.pos_,[child for child in token.children])

for sentence in sentences:
  doc = sp(sentence)
  descriptive_term = ''
  for token in doc:
    if token.pos_ == 'ADJ':
      descriptive_term = token
  print(sentence)
  print(descriptive_term)

for sentence in sentences:
  doc = sp(sentence)
  descriptive_term = ''
  for token in doc:
    if token.pos_ == 'ADJ':
      prepend = ''
      for child in token.children:
        if child.pos_ != 'ADV':
          continue
        prepend += child.text + ' '
      descriptive_term = prepend + token.text
  print(sentence)
  print(descriptive_term)

aspects = []
for sentence in sentences:
  doc = sp(sentence)
  descriptive_term = ''
  target = ''
  for token in doc:
    if token.dep_ == 'nsubj' and token.pos_ == 'NOUN':
      target = token.text
    if token.pos_ == 'ADJ':
      prepend = ''
      for child in token.children:
        if child.pos_ != 'ADV':
          continue
        prepend += child.text + ' '
      descriptive_term = prepend + token.text  
  aspects.append({'aspect': target,'description': descriptive_term})
print(aspects)

from textblob import TextBlob
for aspect in aspects:
  aspect['sentiment'] = TextBlob(aspect['description']).sentiment
print(aspects)

!python -m textblob.download_corpora

from textblob.classifiers import NaiveBayesClassifier
# We train the NaivesBayesClassifier
train = [
  ('Slow internet.', 'negative'),
  ('Delicious food', 'positive'),
  ('Suboptimal experience', 'negative'),
  ('Very enjoyable time', 'positive'),
  ('delicious food.', 'neg')
]
cl = NaiveBayesClassifier(train)
# And then we try to classify some sample sentences.
blob = TextBlob("Delicious food. Very Slow internet. Suboptimal experience. Enjoyable food.", classifier=cl)
for s in blob.sentences:
  print(s)
  print(s.classify())